// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	DoQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	DebugGetAccessRules(ctx context.Context, in *DebugGetAccessRulesRequest, opts ...grpc.CallOption) (*DebugGetAccessRulesResponse, error)
	StoreRoles(ctx context.Context, in *StoreRolesRequest, opts ...grpc.CallOption) (*StoreRolesResponse, error)
	StoreRoleBindings(ctx context.Context, in *StoreRoleBindingsRequest, opts ...grpc.CallOption) (*StoreRoleBindingsResponse, error)
	StoreObjects(ctx context.Context, in *StoreObjectsRequest, opts ...grpc.CallOption) (*StoreObjectsResponse, error)
	DeleteObjects(ctx context.Context, in *DeleteObjectsRequest, opts ...grpc.CallOption) (*DeleteObjectsResponse, error)
	DeleteeRoles(ctx context.Context, in *DeleteRolesRequest, opts ...grpc.CallOption) (*DeleteRolesResponse, error)
	DeleteRoleBindings(ctx context.Context, in *DeleteRoleBindingsRequest, opts ...grpc.CallOption) (*DeleteRoleBindingsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) DoQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/query.v1.Query/DoQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DebugGetAccessRules(ctx context.Context, in *DebugGetAccessRulesRequest, opts ...grpc.CallOption) (*DebugGetAccessRulesResponse, error) {
	out := new(DebugGetAccessRulesResponse)
	err := c.cc.Invoke(ctx, "/query.v1.Query/DebugGetAccessRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StoreRoles(ctx context.Context, in *StoreRolesRequest, opts ...grpc.CallOption) (*StoreRolesResponse, error) {
	out := new(StoreRolesResponse)
	err := c.cc.Invoke(ctx, "/query.v1.Query/StoreRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StoreRoleBindings(ctx context.Context, in *StoreRoleBindingsRequest, opts ...grpc.CallOption) (*StoreRoleBindingsResponse, error) {
	out := new(StoreRoleBindingsResponse)
	err := c.cc.Invoke(ctx, "/query.v1.Query/StoreRoleBindings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StoreObjects(ctx context.Context, in *StoreObjectsRequest, opts ...grpc.CallOption) (*StoreObjectsResponse, error) {
	out := new(StoreObjectsResponse)
	err := c.cc.Invoke(ctx, "/query.v1.Query/StoreObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DeleteObjects(ctx context.Context, in *DeleteObjectsRequest, opts ...grpc.CallOption) (*DeleteObjectsResponse, error) {
	out := new(DeleteObjectsResponse)
	err := c.cc.Invoke(ctx, "/query.v1.Query/DeleteObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DeleteeRoles(ctx context.Context, in *DeleteRolesRequest, opts ...grpc.CallOption) (*DeleteRolesResponse, error) {
	out := new(DeleteRolesResponse)
	err := c.cc.Invoke(ctx, "/query.v1.Query/DeleteeRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DeleteRoleBindings(ctx context.Context, in *DeleteRoleBindingsRequest, opts ...grpc.CallOption) (*DeleteRoleBindingsResponse, error) {
	out := new(DeleteRoleBindingsResponse)
	err := c.cc.Invoke(ctx, "/query.v1.Query/DeleteRoleBindings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	DoQuery(context.Context, *QueryRequest) (*QueryResponse, error)
	DebugGetAccessRules(context.Context, *DebugGetAccessRulesRequest) (*DebugGetAccessRulesResponse, error)
	StoreRoles(context.Context, *StoreRolesRequest) (*StoreRolesResponse, error)
	StoreRoleBindings(context.Context, *StoreRoleBindingsRequest) (*StoreRoleBindingsResponse, error)
	StoreObjects(context.Context, *StoreObjectsRequest) (*StoreObjectsResponse, error)
	DeleteObjects(context.Context, *DeleteObjectsRequest) (*DeleteObjectsResponse, error)
	DeleteeRoles(context.Context, *DeleteRolesRequest) (*DeleteRolesResponse, error)
	DeleteRoleBindings(context.Context, *DeleteRoleBindingsRequest) (*DeleteRoleBindingsResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) DoQuery(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoQuery not implemented")
}
func (UnimplementedQueryServer) DebugGetAccessRules(context.Context, *DebugGetAccessRulesRequest) (*DebugGetAccessRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugGetAccessRules not implemented")
}
func (UnimplementedQueryServer) StoreRoles(context.Context, *StoreRolesRequest) (*StoreRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreRoles not implemented")
}
func (UnimplementedQueryServer) StoreRoleBindings(context.Context, *StoreRoleBindingsRequest) (*StoreRoleBindingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreRoleBindings not implemented")
}
func (UnimplementedQueryServer) StoreObjects(context.Context, *StoreObjectsRequest) (*StoreObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreObjects not implemented")
}
func (UnimplementedQueryServer) DeleteObjects(context.Context, *DeleteObjectsRequest) (*DeleteObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObjects not implemented")
}
func (UnimplementedQueryServer) DeleteeRoles(context.Context, *DeleteRolesRequest) (*DeleteRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteeRoles not implemented")
}
func (UnimplementedQueryServer) DeleteRoleBindings(context.Context, *DeleteRoleBindingsRequest) (*DeleteRoleBindingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleBindings not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_DoQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DoQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query.v1.Query/DoQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DoQuery(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DebugGetAccessRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugGetAccessRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DebugGetAccessRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query.v1.Query/DebugGetAccessRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DebugGetAccessRules(ctx, req.(*DebugGetAccessRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StoreRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StoreRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query.v1.Query/StoreRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StoreRoles(ctx, req.(*StoreRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StoreRoleBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRoleBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StoreRoleBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query.v1.Query/StoreRoleBindings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StoreRoleBindings(ctx, req.(*StoreRoleBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StoreObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StoreObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query.v1.Query/StoreObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StoreObjects(ctx, req.(*StoreObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DeleteObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DeleteObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query.v1.Query/DeleteObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DeleteObjects(ctx, req.(*DeleteObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DeleteeRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DeleteeRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query.v1.Query/DeleteeRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DeleteeRoles(ctx, req.(*DeleteRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DeleteRoleBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DeleteRoleBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query.v1.Query/DeleteRoleBindings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DeleteRoleBindings(ctx, req.(*DeleteRoleBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "query.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoQuery",
			Handler:    _Query_DoQuery_Handler,
		},
		{
			MethodName: "DebugGetAccessRules",
			Handler:    _Query_DebugGetAccessRules_Handler,
		},
		{
			MethodName: "StoreRoles",
			Handler:    _Query_StoreRoles_Handler,
		},
		{
			MethodName: "StoreRoleBindings",
			Handler:    _Query_StoreRoleBindings_Handler,
		},
		{
			MethodName: "StoreObjects",
			Handler:    _Query_StoreObjects_Handler,
		},
		{
			MethodName: "DeleteObjects",
			Handler:    _Query_DeleteObjects_Handler,
		},
		{
			MethodName: "DeleteeRoles",
			Handler:    _Query_DeleteeRoles_Handler,
		},
		{
			MethodName: "DeleteRoleBindings",
			Handler:    _Query_DeleteRoleBindings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/query/query.proto",
}
